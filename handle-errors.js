import {
	HafasError,
	HafasInvalidRequestError,
	HafasNotFoundError,
} from 'hafas-client/lib/errors.js'

const createErrorHandler = (logger) => {
	const handleErrors = (err, req, res, next) => {
		logger.error(err)
		if (res.headersSent) return next()

// > 3.1. Members of a Problem Details Object
// > A problem details object can have the following members:
// > - `type` (string) – A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML). When this member is not present, its value is assumed to be `about:blank`.
// > - `title` (string) – A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see RFC7231, Section 3.4).
// > - `status` (number) – The HTTP status code (RFC7231, Section 6) generated by the origin server for this occurrence of the problem.
// > - `detail` (string) – A human-readable explanation specific to this occurrence of the problem.
// > - `instance` (string) – A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
// https://www.rfc-editor.org/rfc/rfc7807#section-3.1

		const _ = {
			...err,
			// omit details with low signal-to-noise ratio
			request: undefined,
			response: undefined,

			type: undefined,
			detail: err.message || undefined,
			status: err.statusCode || null,
		}

		if (err instanceof HafasError) {
			// todo: provide human-readable documentation under this URL
			_.type = '/.errors/' + encodeURIComponent(err.code)
			_.detail = 'HAFAS error: ' + err.detail
			if (err instanceof HafasInvalidRequestError) {
				_.status = 400
			} else if (err instanceof HafasNotFoundError) {
				_.status = 404
			} else {
				_.status = 502
			}
		}

		// https://www.rfc-editor.org/rfc/rfc7807#section-6.1
		res.set('content-type', 'application/problem+json')
		res.status(_.status || 500)
		res.json(_)
		next()
	}
	return handleErrors
}

export {
	createErrorHandler,
}
